#ifndef __PATTERNS_H__
#define __PATTERNS_H__

/*
Grid Pattern
    A T W E N T Y D
    Q U A R T E R Y
    F I V E H A L F
    D P A S T O R O
    F I V E I G H T
    S I X T H R E E
    T W E L E V E N
    F O U R N I N E
*/

// defines for each word. we add them with "bitwise or" to generate a  for the entire "phrase".
//#define MFIVE     |= 0xF00000000000
//#define MTEN      |= 0x5800000000000000
//#define AQUARTER  |= 0x80FE000000000000
//#define TWENTY    |= 0x7E00000000000000
//#define HALF      |= 0xF0000000000
//#define PAST      |= 0x7800000000
//#define TO        |= 0xC00000000
//#define ONE       |= 0x43
//#define TWO       |= 0xC040
//#define THREE     |= 0x1F0000
//#define FOUR      |= 0xF0
//#define FIVE      |= 0xF0000000
//#define SIX       |= 0xE00000
//#define SEVEN     |= 0x800F00
//#define EIGHT     |= 0x1F000000
//#define NINE      |= 0xF
//#define TEN       |= 0x1010100
//#define ELEVEN    |= 0x3F00
//#define TWELVE    |= 0xF600

uint8_t creeper[8] = {0x00,0x0c,0xec,0x70,0x70,0xec,0x0c,0x00}; //creeper

uint8_t Numbers[60][8] = {
  {0x3e, 0x41, 0x41, 0x3e, 0x7c, 0x82, 0x82, 0x7c}, //00
  {0x3e, 0x41, 0x41, 0x3e, 0x00, 0x84, 0xfe, 0x80}, //01
  {0x3e, 0x41, 0x41, 0x3e, 0xc4, 0xa2, 0x92, 0x8c}, //02
  {0x3e, 0x41, 0x41, 0x3e, 0x44, 0x92, 0x92, 0x6c}, //03
  {0x3e, 0x41, 0x41, 0x3e, 0x30, 0x28, 0x24, 0xfe}, //04
  {0x3e, 0x41, 0x41, 0x3e, 0x4e, 0x8a, 0x8a, 0x72}, //05
  {0x3e, 0x41, 0x41, 0x3e, 0x78, 0x94, 0x92, 0x62}, //06
  {0x3e, 0x41, 0x41, 0x3e, 0x02, 0xe2, 0x12, 0x0e}, //07
  {0x3e, 0x41, 0x41, 0x3e, 0x6c, 0x92, 0x92, 0x6c}, //08
  {0x3e, 0x41, 0x41, 0x3e, 0x0c, 0x92, 0x92, 0x7c}, //09
  {0x42, 0x7f, 0x40, 0x00, 0x7c, 0x82, 0x82, 0x7c}, //10
  {0x42, 0x7f, 0x40, 0x00, 0x00, 0x84, 0xfe, 0x80}, //11
  {0x42, 0x7f, 0x40, 0x00, 0xc4, 0xa2, 0x92, 0x8c}, //12
  {0x42, 0x7f, 0x40, 0x00, 0x44, 0x92, 0x92, 0x6c}, //13
  {0x42, 0x7f, 0x40, 0x00, 0x30, 0x28, 0x24, 0xfe}, //14
  {0x42, 0x7f, 0x40, 0x00, 0x4e, 0x8a, 0x8a, 0x72}, //15
  {0x42, 0x7f, 0x40, 0x00, 0x78, 0x94, 0x92, 0x62}, //16
  {0x42, 0x7f, 0x40, 0x00, 0x02, 0xe2, 0x12, 0x0e}, //17
  {0x42, 0x7f, 0x40, 0x00, 0x6c, 0x92, 0x92, 0x6c}, //18
  {0x42, 0x7f, 0x40, 0x00, 0x0c, 0x92, 0x92, 0x7c}, //19
  {0x62, 0x51, 0x49, 0x46, 0x7c, 0x82, 0x82, 0x7c}, //20
  {0x62, 0x51, 0x49, 0x46, 0x00, 0x84, 0xfe, 0x80}, //21
  {0x62, 0x51, 0x49, 0x46, 0xc4, 0xa2, 0x92, 0x8c}, //22
  {0x62, 0x51, 0x49, 0x46, 0x44, 0x92, 0x92, 0x6c}, //23
  {0x62, 0x51, 0x49, 0x46, 0x30, 0x28, 0x24, 0xfe}, //24
  {0x62, 0x51, 0x49, 0x46, 0x4e, 0x8a, 0x8a, 0x72}, //25
  {0x62, 0x51, 0x49, 0x46, 0x78, 0x94, 0x92, 0x62}, //26
  {0x62, 0x51, 0x49, 0x46, 0x02, 0xe2, 0x12, 0x0e}, //27
  {0x62, 0x51, 0x49, 0x46, 0x6c, 0x92, 0x92, 0x6c}, //28
  {0x62, 0x51, 0x49, 0x46, 0x0c, 0x92, 0x92, 0x7c}, //29
  {0x22, 0x49, 0x49, 0x36, 0x7c, 0x82, 0x82, 0x7c}, //30
  {0x22, 0x49, 0x49, 0x36, 0x00, 0x84, 0xfe, 0x80}, //31
  {0x22, 0x49, 0x49, 0x36, 0xc4, 0xa2, 0x92, 0x8c}, //32
  {0x22, 0x49, 0x49, 0x36, 0x44, 0x92, 0x92, 0x6c}, //33
  {0x22, 0x49, 0x49, 0x36, 0x30, 0x28, 0x24, 0xfe}, //34
  {0x22, 0x49, 0x49, 0x36, 0x4e, 0x8a, 0x8a, 0x72}, //35
  {0x22, 0x49, 0x49, 0x36, 0x78, 0x94, 0x92, 0x62}, //36
  {0x22, 0x49, 0x49, 0x36, 0x02, 0xe2, 0x12, 0x0e}, //37
  {0x22, 0x49, 0x49, 0x36, 0x6c, 0x92, 0x92, 0x6c}, //38
  {0x22, 0x49, 0x49, 0x36, 0x0c, 0x92, 0x92, 0x7c}, //39
  {0x18, 0x14, 0x12, 0x7f, 0x7c, 0x82, 0x82, 0x7c}, //40
  {0x18, 0x14, 0x12, 0x7f, 0x00, 0x84, 0xfe, 0x80}, //41
  {0x18, 0x14, 0x12, 0x7f, 0xc4, 0xa2, 0x92, 0x8c}, //42
  {0x18, 0x14, 0x12, 0x7f, 0x44, 0x92, 0x92, 0x6c}, //43
  {0x18, 0x14, 0x12, 0x7f, 0x30, 0x28, 0x24, 0xfe}, //44
  {0x18, 0x14, 0x12, 0x7f, 0x4e, 0x8a, 0x8a, 0x72}, //45
  {0x18, 0x14, 0x12, 0x7f, 0x78, 0x94, 0x92, 0x62}, //46
  {0x18, 0x14, 0x12, 0x7f, 0x02, 0xe2, 0x12, 0x0e}, //47
  {0x18, 0x14, 0x12, 0x7f, 0x6c, 0x92, 0x92, 0x6c}, //48
  {0x18, 0x14, 0x12, 0x7f, 0x0c, 0x92, 0x92, 0x7c}, //49
  {0x27, 0x45, 0x45, 0x39, 0x7c, 0x82, 0x82, 0x7c}, //50
  {0x27, 0x45, 0x45, 0x39, 0x00, 0x84, 0xfe, 0x80}, //51
  {0x27, 0x45, 0x45, 0x39, 0xc4, 0xa2, 0x92, 0x8c}, //52
  {0x27, 0x45, 0x45, 0x39, 0x44, 0x92, 0x92, 0x6c}, //53
  {0x27, 0x45, 0x45, 0x39, 0x30, 0x28, 0x24, 0xfe}, //54
  {0x27, 0x45, 0x45, 0x39, 0x4e, 0x8a, 0x8a, 0x72}, //55
  {0x27, 0x45, 0x45, 0x39, 0x78, 0x94, 0x92, 0x62}, //56
  {0x27, 0x45, 0x45, 0x39, 0x02, 0xe2, 0x12, 0x0e}, //57
  {0x27, 0x45, 0x45, 0x39, 0x6c, 0x92, 0x92, 0x6c}, //58
  {0x27, 0x45, 0x45, 0x39, 0x0c, 0x92, 0x92, 0x7c}, //59
};

uint8_t Pattern[19][8] = {
  {0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00}, //MFIVE    0
  {0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00}, //MTEN     1
  {0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00}, //AQUARTER 2
  {0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00}, //TWENTY   3
  {0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x04}, //HALF     4
  {0x00, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00}, //PAST     5
  {0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00}, //TO       6
  {0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80}, //ONE      7
  {0x40, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //TWO      8
  {0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20}, //THREE    9
  {0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00}, //FOUR    10
  {0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00}, //FIVE    11 
  {0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00}, //SIX     12
  {0x20, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40}, //SEVEN   13
  {0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10}, //EIGHT   14
  {0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80}, //NINE    15
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70}, //TEN     16
  {0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40}, //ELEVEN  17
  {0x40, 0x40, 0x40, 0x40, 0x00, 0x40, 0x40, 0x00}, //TWELVE  18
};

#endif
